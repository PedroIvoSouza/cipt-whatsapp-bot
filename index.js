// Corrige erro do Baileys no Node 20+
const crypto = require("node:crypto");
global.crypto = crypto;

const express = require('express');
const dotenv = require('dotenv');
const fs = require('fs');
const pdfParse = require('pdf-parse');
const { RecursiveCharacterTextSplitter } = require("langchain/text_splitter");
const { makeWASocket, useMultiFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys');
const OpenAI = require('openai');
const fetch = require('node-fetch');
const nodemailer = require("nodemailer");
const { ciptPrompt } = require("./ciptPrompt.js");
const { registrarChamado, atualizarStatusChamado } = require("./sheetsChamados");

dotenv.config();

const app = express();
app.use(express.json());

const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

let pdfChunks = [];
let embeddingsCache = [];

// Controle de sess√µes
const usuariosAtivos = {};
const usuariosSemResposta = {};
const timersEncerramento = {};
const TEMPO_INATIVIDADE = 30 * 60 * 1000;
const TEMPO_ENCERRAMENTO = 5 * 60 * 1000;
const TEMPO_CHECAGEM = 30 * 1000;
const historicoUsuarios = {};
const LIMITE_HISTORICO = 6;
const contatosEnviados = {};
const GRUPO_SUPORTE_JID = process.env.GRUPO_SUPORTE_JID;

// Fun√ß√£o para gerar ou carregar embeddings
async function gerarOuCarregarEmbeddings() {
  try {
    if (fs.existsSync('./embeddings.json')) {
      embeddingsCache = JSON.parse(fs.readFileSync('./embeddings.json', 'utf8'));
      console.log("üì¶ Embeddings carregados do cache.");
      return;
    }

    console.log("üìÑ Lendo regimento e fontes extras...");
    const dataBuffer = fs.readFileSync('./regimento.pdf');
    let pdfData = await pdfParse(dataBuffer);

    let textoNormalizado = pdfData.text.replace(/\n\s*\n/g, '\n').replace(/\s+/g, ' ');
    const fontesExtras = fs.readFileSync('./fontes.txt', 'utf8');
    const fontesNormalizadas = fontesExtras.replace(/\n\s*\n/g, '\n').replace(/\s+/g, ' ');

    const splitter = new RecursiveCharacterTextSplitter({ chunkSize: 1200, chunkOverlap: 200 });

    const pdfDividido = await splitter.splitText(textoNormalizado);
    const fontesDivididas = await splitter.splitText(fontesNormalizadas);
    pdfChunks = [...pdfDividido, ...fontesDivididas];

    console.log(`üìö Regimento dividido em ${pdfDividido.length} trechos.`);
    console.log(`üìö Fontes extras divididas em ${fontesDivididas.length} trechos.`);
    console.log(`üìÑ Total carregado: ${pdfChunks.length} trechos.`);

    console.log("‚öôÔ∏è Gerando embeddings...");
    for (let chunk of pdfChunks) {
      const embedding = await client.embeddings.create({
        model: "text-embedding-3-small",
        input: chunk
      });
      embeddingsCache.push({ trecho: chunk, vector: embedding.data[0].embedding });
    }

    fs.writeFileSync('./embeddings.json', JSON.stringify(embeddingsCache, null, 2));
    console.log("‚úÖ Embeddings salvos em cache.");
  } catch (err) {
    console.error("‚ùå Erro ao carregar embeddings:", err.message);
  }
}

// Buscar trechos relevantes
async function buscarTrechosRelevantes(pergunta) {
  try {
    const perguntaEmbedding = await client.embeddings.create({
      model: "text-embedding-3-small",
      input: pergunta
    });

    const perguntaVector = perguntaEmbedding.data[0].embedding;

    const resultados = embeddingsCache.map(e => {
      const dot = perguntaVector.reduce((acc, val, idx) => acc + val * e.vector[idx], 0);
      const magA = Math.sqrt(perguntaVector.reduce((acc, val) => acc + val * val, 0));
      const magB = Math.sqrt(e.vector.reduce((acc, val) => acc + val * val, 0));
      const score = dot / (magA * magB);
      return { trecho: e.trecho, score };
    });

    resultados.sort((a, b) => b.score - a.score);
    const resultadosFiltrados = resultados.filter(r => r.score > 0.72);
    const selecionados = (resultadosFiltrados.length > 0 ? resultadosFiltrados : resultados)
      .slice(0, 8).map(r => r.trecho);

    console.log(`üîé Resgatados ${selecionados.length} trechos relevantes.`);
    return selecionados.join("\n\n");

  } catch (err) {
    console.error("‚ùå Erro ao buscar trechos relevantes:", err.message);
    return "";
  }
}

// Classifica se a mensagem √© chamado e sugere categoria
async function classificarChamado(pergunta) {
  try {
    const resp = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { 
          role: "system", 
          content: `Voc√™ √© um classificador de chamados para um condom√≠nio/empresa. 
          Sua tarefa √© responder em JSON no formato: {"ehChamado":"SIM ou NAO","categoria":"Categoria"}.
          Categorias dispon√≠veis: 
          - Internet e Rede
          - Energia El√©trica
          - Limpeza
          - Manuten√ß√£o Civil
          - Seguran√ßa e Portaria
          - Elevadores
          - Hidr√°ulica / Vazamentos
          - Equipamentos / M√≥veis
          - Administrativo / Outros
          
          Caso n√£o seja chamado, responda {"ehChamado":"NAO","categoria":"N/A"}.
          Seja objetivo e n√£o adicione nada al√©m do JSON.`
        },
        { role: "user", content: pergunta }
      ],
      temperature: 0,
      max_tokens: 50
    });

    const conteudo = resp.choices[0].message.content.trim();
    try {
      return JSON.parse(conteudo);
    } catch (e) {
      console.error("‚ö†Ô∏è Erro ao interpretar JSON:", conteudo);
      return { ehChamado: "NAO", categoria: "N/A" };
    }
  } catch (err) {
    console.error("‚ùå Erro ao classificar chamado:", err.message);
    return { ehChamado: "NAO", categoria: "N/A" };
  }
}

// Detecta follow-up
function ehFollowUp(pergunta) {
  const conectores = [
    "e ", "mas ", "ent√£o", "sobre isso", "e quanto", "e sobre", "ainda", "continuando", "ok", "certo"
  ];
  const curtas = pergunta.split(" ").length <= 5;
  return conectores.some(c => pergunta.startsWith(c)) || curtas;
}

// Sauda√ß√µes
function gerarSaudacao(nome) {
  const opcoes = [
    `Ol√°, ${nome}! üëã`,
    `Oi, ${nome}! Tudo bem? üôÇ`,
    `Seja bem-vindo(a), ${nome}! üåü`,
    `Oi oi, ${nome}! Como posso te ajudar hoje? ü§ó`,
    `Prazer falar com voc√™, ${nome}! üôå`
  ];
  return opcoes[Math.floor(Math.random() * opcoes.length)];
}

// Sugest√µes din√¢micas
function gerarSugestoes() {
  const opcoes = [
    "Como fa√ßo para reservar o audit√≥rio?",
    "Quais s√£o as penalidades por descumprimento das regras?",
    "Posso levar animais para o CIPT?",
    "Quais s√£o os hor√°rios de funcionamento?",
    "Como funciona o estacionamento do CIPT?",
    "Como fa√ßo meu cadastro para ter acesso ao espa√ßo?",
    "Qual √© a diferen√ßa entre o audit√≥rio e as salas de reuni√£o?",
    "Quem pode usar os laborat√≥rios do CIPT?",
    "Quais s√£o os documentos necess√°rios para reservar um espa√ßo?",
    "Como funciona o restaurante-escola?",
  ];
  const sorteadas = opcoes.sort(() => 0.5 - Math.random()).slice(0, 3);
  return `
‚ÑπÔ∏è Voc√™ tamb√©m pode me perguntar, por exemplo:
- ${sorteadas[0]}
- ${sorteadas[1]}
- ${sorteadas[2]}
`;
}

// Enviar vCard
async function enviarContato(sock, jid, nome, telefone) {
  try {
    const sentMsg = await sock.sendMessage(jid, {
      contacts: {
        displayName: nome,
        contacts: [{
          displayName: nome,
          vcard: `BEGIN:VCARD\nVERSION:3.0\nFN:${nome}\nTEL;type=CELL;type=VOICE;waid=${telefone}:${telefone}\nEND:VCARD`
        }]
      }
    });

    setTimeout(async () => {
      if (!sentMsg.key?.id) {
        console.log(`‚ö†Ô∏è vCard n√£o entregue, enviando fallback para ${jid}`);
        await sock.sendMessage(jid, { text: `üìû Contato de ${nome}: +${telefone}` });
      }
    }, 4000);

  } catch (err) {
    console.error("Erro ao enviar vCard:", err.message);
    await sock.sendMessage(jid, { text: `üìû Contato de ${nome}: +${telefone}` });
  }
}

// Fun√ß√£o para enviar email
async function enviarEmail(assunto, mensagem) {
  try {
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: { user: process.env.GMAIL_USER, pass: process.env.GMAIL_PASS }
    });
    await transporter.sendMail({
      from: `"Bot CIPT" <${process.env.GMAIL_USER}>`,
      to: "supcti.secti@gmail.com",
      subject: assunto,
      text: mensagem
    });
  } catch (error) {
    console.error("Erro ao enviar email:", error.message);
  }
}

// Salvar logs
function salvarLog(nome, pergunta) {
  const data = new Date().toLocaleString("pt-BR");
  const linha = `[${data}] üë§ ${nome}: üí¨ ${pergunta}\n`;
  fs.appendFile("mensagens.log", linha, (err) => {
    if (err) {
      console.error("‚ùå Erro ao salvar log:", err);
    }
  });
}

// Inicializa√ß√£o do bot
async function startBot() {
  await gerarOuCarregarEmbeddings();

  const { state, saveCreds } = await useMultiFileAuthState('auth');
  const sock = makeWASocket({ auth: state });
  sock.ev.on('creds.update', saveCreds);

  sock.ev.on('connection.update', async (update) => {
    const { connection, qr, lastDisconnect } = update;
    if (qr) {
      console.log(`üì≤ Escaneie o QR: https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(qr)}`);
    }
    if (connection === 'open') {
      console.log('‚úÖ Conectado ao WhatsApp!');
    }
    if (connection === 'close') {
      const statusCode = lastDisconnect?.error?.output?.statusCode;
      const shouldReconnect = statusCode !== DisconnectReason.loggedOut && statusCode !== 409;
      console.log('‚ùå Conex√£o caiu. Reiniciando:', shouldReconnect);
      if (shouldReconnect) setTimeout(startBot, 5000);
    }
  });

  sock.ev.on('messages.upsert', async ({ messages }) => {
    const msg = messages[0];
    if (msg.key.fromMe) return;

    const jid = msg.key.remoteJid;

    // Grupo
    if (jid.endsWith("@g.us")) {
      const textoGrupo =
        msg.message?.extendedTextMessage?.text?.toLowerCase() ||
        msg.message?.conversation?.toLowerCase() ||
        "";
      if (!textoGrupo.includes("@bot")) return;
    }

    if (msg.message?.conversation) {
      const pergunta = msg.message.conversation.toLowerCase().trim();
      const isFollowUp = ehFollowUp(pergunta);
      const nomeContato = msg.pushName || "visitante";
      const agora = Date.now();

      // Chamados (com classifica√ß√£o inteligente)
      const classificacao = await classificarChamado(pergunta);

      if (classificacao.ehChamado === "SIM") {
        const confirmacao = `üëÄ Percebi que voc√™ quer registrar um chamado. Confirma?\n\nüìå Descri√ß√£o: "${pergunta}"\nüìÇ Categoria: ${classificacao.categoria}\n\nResponda com "Sim" para confirmar ou "N√£o" para cancelar.`;

        usuariosAtivos[jid] = { 
          ...usuariosAtivos[jid], 
          chamadoPendente: { descricao: pergunta, categoria: classificacao.categoria } 
        };

        await sock.sendMessage(jid, { text: confirmacao });
        return;
      }

      historicoUsuarios[jid] = historicoUsuarios[jid] || [];
      historicoUsuarios[jid].push({ role: "user", content: pergunta });
      if (historicoUsuarios[jid].length > LIMITE_HISTORICO) {
        historicoUsuarios[jid] = historicoUsuarios[jid].slice(-LIMITE_HISTORICO);
      }

      salvarLog(nomeContato, pergunta);

      // Tratamento de mensagens de bot√µes e confirma√ß√£o de chamado
      if (usuariosAtivos[jid]?.chamadoPendente) {
        if (pergunta === "sim") {
          const chamado = usuariosAtivos[jid].chamadoPendente;
          const protocolo = "CH-" + Date.now().toString().slice(-5);

          const classificacao = await classificarChamado(chamado.descricao);
          chamado.categoria = classificacao?.categoria || "Outros";

          await registrarChamado({
            protocolo,
            nome: nomeContato,
            telefone: jid.split("@")[0],
            descricao: chamado.descricao,
            categoria: chamado.categoria,
            status: "Aberto",
            usuarioJid: jid
          });

          await sock.sendMessage(jid, {
            text: `‚úÖ Chamado registrado com sucesso!\nüìå Protocolo: ${protocolo}\nüìÇ Categoria: ${chamado.categoria}\n\nA equipe j√° foi notificada.`
          });

          if (GRUPO_SUPORTE_JID) {
            await sock.sendMessage(GRUPO_SUPORTE_JID, {
              text: `üö® Novo chamado aberto!\nüìå Protocolo: ${protocolo}\nüë§ Usu√°rio: ${nomeContato}\nüìÇ Categoria: ${chamado.categoria}\nüìù Descri√ß√£o: ${chamado.descricao}`,
              templateButtons: [
                { index: 1, quickReplyButton: { displayText: "Chamado em Atendimento", id: `atendimento_${protocolo}` } },
                { index: 2, quickReplyButton: { displayText: "Chamado Conclu√≠do", id: `concluido_${protocolo}` } },
                { index: 3, quickReplyButton: { displayText: "Chamado Rejeitado", id: `rejeitado_${protocolo}` } },
              ]
            });
          }

          delete usuariosAtivos[jid].chamadoPendente;
          return;
        }

        if (pergunta === "n√£o") {
          await sock.sendMessage(jid, { text: "‚ùå Chamado cancelado." });
          delete usuariosAtivos[jid].chamadoPendente;
          return;
        }
      }

      // Captura clique nos bot√µes do grupo
      if (msg.message?.templateButtonReplyMessage) {
        const buttonId = msg.message.templateButtonReplyMessage.selectedId;
        const jid = msg.key.remoteJid;

        if (buttonId.startsWith("atendimento_")) {
          const protocolo = buttonId.replace("atendimento_", "");
          const responsavel = msg.pushName || "Equipe Suporte";
          const usuarioJid = await atualizarStatusChamado(protocolo, "Em Atendimento", responsavel);

          await sock.sendMessage(jid, { text: `üìå Chamado ${protocolo} atualizado para *Em Atendimento* por ${responsavel}.` });

          if (usuarioJid) {
            await sock.sendMessage(usuarioJid, { text: `üìå Seu chamado ${protocolo} agora est√° *Em Atendimento* por ${responsavel}.` });
          }
        }

        if (buttonId.startsWith("concluido_")) {
          const protocolo = buttonId.replace("concluido_", "");
          const usuarioJid = await atualizarStatusChamado(protocolo, "Conclu√≠do");
          await sock.sendMessage(jid, { text: `‚úÖ Chamado ${protocolo} atualizado para *Conclu√≠do*.` });

          if (usuarioJid) {
            await sock.sendMessage(usuarioJid, { text: `‚úÖ Seu chamado ${protocolo} foi *Conclu√≠do*. Obrigado pelo contato!` });
          }
        }

        if (buttonId.startsWith("rejeitado_")) {
          const protocolo = buttonId.replace("rejeitado_", "");
          const usuarioJid = await atualizarStatusChamado(protocolo, "Rejeitado");
          await sock.sendMessage(jid, { text: `‚ùå Chamado ${protocolo} atualizado para *Rejeitado*.` });

          if (usuarioJid) {
            await sock.sendMessage(usuarioJid, { text: `‚ùå Seu chamado ${protocolo} foi *Rejeitado*. Caso necess√°rio, entre em contato novamente.` });
          }
        }
      }

      // O bloco 'try...catch' agora engloba a l√≥gica principal do bot
      try {
        const saudacoes = ["oi", "ol√°", "ola", "bom dia", "boa tarde", "boa noite", "e a√≠"];
        const agradecimentos = ["obrigado", "obrigada", "valeu", "thanks", "agradecido"];
        const despedidas = ["tchau", "at√© mais", "flw", "falou", "at√© logo", "at√© breve"];

        if (saudacoes.includes(pergunta)) {
          const saudacao = `${gerarSaudacao(nomeContato)}\nSou a *IA do CIPT*! Posso te ajudar com d√∫vidas sobre acesso, reservas de espa√ßos, regras de conviv√™ncia e tudo mais do nosso regimento interno. Quer saber por onde come√ßar?`;
          await sock.sendMessage(jid, { text: saudacao });
          return;
        }

        if (agradecimentos.includes(pergunta) || despedidas.includes(pergunta)) {
          await sock.sendMessage(jid, {
            text: `De nada, ${nomeContato}! Foi um prazer ajudar ü§ó\nSe precisar novamente, √© s√≥ me chamar. At√© logo!`
          });
          delete usuariosAtivos[jid];
          if (timersEncerramento[jid]) clearTimeout(timersEncerramento[jid]);
          delete timersEncerramento[jid];
          return;
        }

        const trechos = await buscarTrechosRelevantes(pergunta);
        let resposta;

        if (!trechos || trechos.trim().length < 30) {
          resposta = "Olha, n√£o encontrei essa informa√ß√£o no regimento interno e nem nas bases que eu uso para te responder. Mas voc√™ pode falar direto com a administra√ß√£o pelo e-mail supcti@secti.al.gov.br ou passando na recep√ß√£o do CIPT, que eles resolvem rapidinho.";
        } else {
          const completion = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
              { role: "system", content: `${ciptPrompt}\n‚ö†Ô∏è Importante: use apenas trechos coerentes e n√£o misture regras diferentes.` },
              ...historicoUsuarios[jid],
              { role: "assistant", content: `Base de consulta:\n${trechos}` },
              ...(isFollowUp ? [{ role: "system", content: "‚ö° A mensagem √© uma continua√ß√£o. Responda levando em conta o hist√≥rico acima, sem repetir informa√ß√µes j√° dadas." }] : [])
            ],
            temperature: 0.2,
            max_tokens: 700
          });
          resposta = completion.choices[0].message.content.trim();
          historicoUsuarios[jid].push({ role: "assistant", content: resposta });
        }

        let saudacaoExtra = "";
        if (!usuariosAtivos[jid] || (agora - usuariosAtivos[jid]) > TEMPO_INATIVIDADE) {
          saudacaoExtra = `${gerarSaudacao(nomeContato)}\nAqui √© o assistente virtual do Centro de Inova√ß√£o do Jaragu√° ‚Äî pode me chamar de *IA do CIPT*.\n\n`;
        }

        usuariosAtivos[jid] = agora;
        usuariosSemResposta[jid] = false;

        if (!contatosEnviados[jid]) {
          const decisao = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
              { role: "system", content: "Voc√™ √© um classificador. Responda apenas com SIM ou N√ÉO. Avalie se a resposta do assistente indica necessidade de enviar um contato humano (ex: reservas, problemas administrativos, d√∫vidas que n√£o podem ser resolvidas pelo regimento)." },
              { role: "user", content: `Mensagem do usu√°rio: ${pergunta}\nResposta do assistente: ${resposta}` }
            ],
            temperature: 0,
            max_tokens: 5
          });

          const precisaContato = decisao.choices[0].message.content.trim().toUpperCase().includes("SIM");

          if (precisaContato) {
            if (resposta.toLowerCase().includes("audit√≥rio")) {
              await enviarContato(sock, jid, "Reservas Audit√≥rio CIPT", "558287145526");
            } else if (resposta.toLowerCase().includes("sala de reuni√£o")) {
              await enviarContato(sock, jid, "Recep√ß√£o CIPT", "558288334368");
            }
            contatosEnviados[jid] = true;
          }
        }

        const sugestoes = gerarSugestoes();
        const mensagemFinal = `${saudacaoExtra}${resposta}\n\n${sugestoes}`;
        await sock.sendMessage(jid, { text: mensagemFinal });

        if (timersEncerramento[jid]) clearTimeout(timersEncerramento[jid]);
        timersEncerramento[jid] = setTimeout(async () => {
          const tempoPassado = Date.now() - usuariosAtivos[jid];
          if (tempoPassado >= TEMPO_ENCERRAMENTO) {
            await sock.sendMessage(jid, { text: "Encerrando seu atendimento por inatividade. Se precisar novamente, √© s√≥ chamar! üòâ" });
            delete usuariosAtivos[jid];
            delete timersEncerramento[jid];
            delete historicoUsuarios[jid];
            delete contatosEnviados[jid];
          }
        }, TEMPO_ENCERRAMENTO);

      } catch (err) {
        console.error('‚ùå Erro no processamento:', err.message);
        usuariosSemResposta[jid] = true;
      }
    }
  });

  setInterval(async () => {
    for (let jid in usuariosSemResposta) {
      if (usuariosSemResposta[jid]) {
        await sock.sendMessage(jid, {
          text: "N√£o consegui processar sua √∫ltima mensagem. Pode me mandar de novo?"
        });
        usuariosSemResposta[jid] = false;
      }
    }
  }, TEMPO_CHECAGEM);
}

startBot();

const { exec } = require("child_process");
exec("node testeSheets.js", (error, stdout, stderr) => {
  if (error) {
    console.error(`‚ùå Erro no teste Google Sheets: ${error.message}`);
    return;
  }
  if (stderr) {
    console.error(`‚ö†Ô∏è Aviso no teste Google Sheets: ${stderr}`);
    return;
  }
  console.log(`‚úÖ Resultado do teste Google Sheets:\n${stdout}`);
});

app.listen(3000, () => {
  console.log('üåê Servidor rodando na porta 3000');
  setInterval(() => {
    fetch("https://cipt-whatsapp-bot.onrender.com/")
      .then(() => console.log("üîÑ Mantendo servi√ßo ativo..."))
      .catch(err => console.error("‚ö†Ô∏è Erro no keep-alive:", err.message));
  }, 4 * 60 * 1000);
});

app.get('/', (req, res) => {
  res.send('‚úÖ Bot do CIPT est√° online!');
});